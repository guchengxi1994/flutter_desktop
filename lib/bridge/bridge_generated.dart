// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.74.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class Native {
  Future<String> rustBridgeSayHello({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRustBridgeSayHelloConstMeta;

  Future<void> setDbPath({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetDbPathConstMeta;

  Future<void> initDb({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitDbConstMeta;

  /// operation-logger
  Future<void> newLog({required String content, String? result, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewLogConstMeta;

  /// files
  Future<int> newFile(
      {required String virtualPath, required String realPath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewFileConstMeta;

  Stream<NativeSysInfo> sysInfoStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSysInfoStreamConstMeta;

  Future<void> listenSysinfo({String? name, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListenSysinfoConstMeta;
}

class NativeSysInfo {
  final double cpu;
  final int memory;
  final int t;

  const NativeSysInfo({
    required this.cpu,
    required this.memory,
    required this.t,
  });
}

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<String> rustBridgeSayHello({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_rust_bridge_say_hello(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kRustBridgeSayHelloConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRustBridgeSayHelloConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rust_bridge_say_hello",
        argNames: [],
      );

  Future<void> setDbPath({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_db_path(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetDbPathConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetDbPathConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_db_path",
        argNames: ["s"],
      );

  Future<void> initDb({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_db(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitDbConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitDbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_db",
        argNames: [],
      );

  Future<void> newLog({required String content, String? result, dynamic hint}) {
    var arg0 = _platform.api2wire_String(content);
    var arg1 = _platform.api2wire_opt_String(result);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_log(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kNewLogConstMeta,
      argValues: [content, result],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewLogConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_log",
        argNames: ["content", "result"],
      );

  Future<int> newFile(
      {required String virtualPath, required String realPath, dynamic hint}) {
    var arg0 = _platform.api2wire_String(virtualPath);
    var arg1 = _platform.api2wire_String(realPath);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_file(port_, arg0, arg1),
      parseSuccessData: _wire2api_i64,
      constMeta: kNewFileConstMeta,
      argValues: [virtualPath, realPath],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_file",
        argNames: ["virtualPath", "realPath"],
      );

  Stream<NativeSysInfo> sysInfoStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sys_info_stream(port_),
      parseSuccessData: _wire2api_native_sys_info,
      constMeta: kSysInfoStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSysInfoStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sys_info_stream",
        argNames: [],
      );

  Future<void> listenSysinfo({String? name, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_listen_sysinfo(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kListenSysinfoConstMeta,
      argValues: [name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListenSysinfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "listen_sysinfo",
        argNames: ["name"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  NativeSysInfo _wire2api_native_sys_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return NativeSysInfo(
      cpu: _wire2api_f32(arr[0]),
      memory: _wire2api_u64(arr[1]),
      t: _wire2api_u64(arr[2]),
    );
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(uintptr_t)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_rust_bridge_say_hello(
    int port_,
  ) {
    return _wire_rust_bridge_say_hello(
      port_,
    );
  }

  late final _wire_rust_bridge_say_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_rust_bridge_say_hello');
  late final _wire_rust_bridge_say_hello =
      _wire_rust_bridge_say_helloPtr.asFunction<void Function(int)>();

  void wire_set_db_path(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_set_db_path(
      port_,
      s,
    );
  }

  late final _wire_set_db_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_set_db_path');
  late final _wire_set_db_path = _wire_set_db_pathPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_init_db(
    int port_,
  ) {
    return _wire_init_db(
      port_,
    );
  }

  late final _wire_init_dbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_init_db');
  late final _wire_init_db = _wire_init_dbPtr.asFunction<void Function(int)>();

  void wire_new_log(
    int port_,
    ffi.Pointer<wire_uint_8_list> content,
    ffi.Pointer<wire_uint_8_list> result,
  ) {
    return _wire_new_log(
      port_,
      content,
      result,
    );
  }

  late final _wire_new_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_log');
  late final _wire_new_log = _wire_new_logPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> virtual_path,
    ffi.Pointer<wire_uint_8_list> real_path,
  ) {
    return _wire_new_file(
      port_,
      virtual_path,
      real_path,
    );
  }

  late final _wire_new_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_file');
  late final _wire_new_file = _wire_new_filePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_sys_info_stream(
    int port_,
  ) {
    return _wire_sys_info_stream(
      port_,
    );
  }

  late final _wire_sys_info_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_sys_info_stream');
  late final _wire_sys_info_stream =
      _wire_sys_info_streamPtr.asFunction<void Function(int)>();

  void wire_listen_sysinfo(
    int port_,
    ffi.Pointer<wire_uint_8_list> name,
  ) {
    return _wire_listen_sysinfo(
      port_,
      name,
    );
  }

  late final _wire_listen_sysinfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_listen_sysinfo');
  late final _wire_listen_sysinfo = _wire_listen_sysinfoPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
typedef uintptr_t = ffi.UnsignedLongLong;
