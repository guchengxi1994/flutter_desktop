// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.74.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class Native {
  Future<String> rustBridgeSayHello({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRustBridgeSayHelloConstMeta;

  Future<void> setDbPath({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetDbPathConstMeta;

  Future<void> initDb({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitDbConstMeta;

  /// operation-logger
  Future<void> newLog({required String content, String? result, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewLogConstMeta;

  /// files
  Future<int> newFile(
      {required String virtualPath, required String realPath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewFileConstMeta;

  Stream<NativeSysInfo> sysInfoStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSysInfoStreamConstMeta;

  Future<void> listenSysinfo({String? name, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListenSysinfoConstMeta;

  Future<void> setJsonPath({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetJsonPathConstMeta;

  Future<void> setCachePath({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetCachePathConstMeta;

  Future<void> setIdiomPath({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetIdiomPathConstMeta;

  Future<List<Idiom>> getIdioms({int? count, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetIdiomsConstMeta;

  Future<Idiom?> getOneIdiom({required int index, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetOneIdiomConstMeta;

  Future<void> initFolder({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitFolderConstMeta;

  Future<void> createNewTxt(
      {required String filename,
      required String openWith,
      int? folderId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateNewTxtConstMeta;

  Future<List<FileOrFolder>> getChildrenById({int? i, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetChildrenByIdConstMeta;

  Future<int> newPractice({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewPracticeConstMeta;

  Future<void> updatePractice(
      {required int hit, required int index, required int rowId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdatePracticeConstMeta;

  Future<PracticeStatus?> getLastPractice({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetLastPracticeConstMeta;

  Future<void> delete3DaysAgoHistory({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDelete3DaysAgoHistoryConstMeta;

  Future<void> newBrowserHistory({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewBrowserHistoryConstMeta;

  Future<List<BrowserHistory>> fetchHistory({required int page, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchHistoryConstMeta;
}

class BrowserHistory {
  final int visitId;
  final String url;
  final int createAt;
  final int isDeleted;

  const BrowserHistory({
    required this.visitId,
    required this.url,
    required this.createAt,
    required this.isDeleted,
  });
}

@freezed
class FileOrFolder with _$FileOrFolder {
  const factory FileOrFolder.file(
    VirtualFile field0,
  ) = FileOrFolder_File;
  const factory FileOrFolder.folder(
    VirtualFolder field0,
  ) = FileOrFolder_Folder;
}

class Idiom {
  final String idiom;
  final String pinyin;
  final String pinyinTone;
  final String meaning;

  const Idiom({
    required this.idiom,
    required this.pinyin,
    required this.pinyinTone,
    required this.meaning,
  });
}

class NativeSysInfo {
  final double cpu;
  final int memory;
  final int t;

  const NativeSysInfo({
    required this.cpu,
    required this.memory,
    required this.t,
  });
}

class PracticeStatus {
  final int hit;
  final int current;
  final int practiceId;
  final int createAt;

  const PracticeStatus({
    required this.hit,
    required this.current,
    required this.practiceId,
    required this.createAt,
  });
}

class VirtualFile {
  final int fileId;
  final String virtualPath;
  final String realPath;
  final String fileType;
  final String icon;
  final String openWith;
  final int createAt;

  const VirtualFile({
    required this.fileId,
    required this.virtualPath,
    required this.realPath,
    required this.fileType,
    required this.icon,
    required this.openWith,
    required this.createAt,
  });
}

class VirtualFolder {
  final int folderId;
  final int createAt;
  final int isDeleted;
  final String folderName;

  const VirtualFolder({
    required this.folderId,
    required this.createAt,
    required this.isDeleted,
    required this.folderName,
  });
}

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<String> rustBridgeSayHello({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_rust_bridge_say_hello(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kRustBridgeSayHelloConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRustBridgeSayHelloConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rust_bridge_say_hello",
        argNames: [],
      );

  Future<void> setDbPath({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_db_path(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetDbPathConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetDbPathConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_db_path",
        argNames: ["s"],
      );

  Future<void> initDb({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_db(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitDbConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitDbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_db",
        argNames: [],
      );

  Future<void> newLog({required String content, String? result, dynamic hint}) {
    var arg0 = _platform.api2wire_String(content);
    var arg1 = _platform.api2wire_opt_String(result);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_log(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kNewLogConstMeta,
      argValues: [content, result],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewLogConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_log",
        argNames: ["content", "result"],
      );

  Future<int> newFile(
      {required String virtualPath, required String realPath, dynamic hint}) {
    var arg0 = _platform.api2wire_String(virtualPath);
    var arg1 = _platform.api2wire_String(realPath);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_file(port_, arg0, arg1),
      parseSuccessData: _wire2api_i64,
      constMeta: kNewFileConstMeta,
      argValues: [virtualPath, realPath],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_file",
        argNames: ["virtualPath", "realPath"],
      );

  Stream<NativeSysInfo> sysInfoStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sys_info_stream(port_),
      parseSuccessData: _wire2api_native_sys_info,
      constMeta: kSysInfoStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSysInfoStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sys_info_stream",
        argNames: [],
      );

  Future<void> listenSysinfo({String? name, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_listen_sysinfo(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kListenSysinfoConstMeta,
      argValues: [name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListenSysinfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "listen_sysinfo",
        argNames: ["name"],
      );

  Future<void> setJsonPath({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_json_path(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetJsonPathConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetJsonPathConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_json_path",
        argNames: ["s"],
      );

  Future<void> setCachePath({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_cache_path(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetCachePathConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetCachePathConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_cache_path",
        argNames: ["s"],
      );

  Future<void> setIdiomPath({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_idiom_path(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetIdiomPathConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetIdiomPathConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_idiom_path",
        argNames: ["s"],
      );

  Future<List<Idiom>> getIdioms({int? count, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_u64(count);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_idioms(port_, arg0),
      parseSuccessData: _wire2api_list_idiom,
      constMeta: kGetIdiomsConstMeta,
      argValues: [count],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetIdiomsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_idioms",
        argNames: ["count"],
      );

  Future<Idiom?> getOneIdiom({required int index, dynamic hint}) {
    var arg0 = api2wire_usize(index);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_one_idiom(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_idiom,
      constMeta: kGetOneIdiomConstMeta,
      argValues: [index],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetOneIdiomConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_one_idiom",
        argNames: ["index"],
      );

  Future<void> initFolder({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_folder(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitFolderConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitFolderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_folder",
        argNames: ["s"],
      );

  Future<void> createNewTxt(
      {required String filename,
      required String openWith,
      int? folderId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(filename);
    var arg1 = _platform.api2wire_String(openWith);
    var arg2 = _platform.api2wire_opt_box_autoadd_i64(folderId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_create_new_txt(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kCreateNewTxtConstMeta,
      argValues: [filename, openWith, folderId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateNewTxtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_new_txt",
        argNames: ["filename", "openWith", "folderId"],
      );

  Future<List<FileOrFolder>> getChildrenById({int? i, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_i64(i);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_children_by_id(port_, arg0),
      parseSuccessData: _wire2api_list_file_or_folder,
      constMeta: kGetChildrenByIdConstMeta,
      argValues: [i],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetChildrenByIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_children_by_id",
        argNames: ["i"],
      );

  Future<int> newPractice({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_practice(port_),
      parseSuccessData: _wire2api_i64,
      constMeta: kNewPracticeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewPracticeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_practice",
        argNames: [],
      );

  Future<void> updatePractice(
      {required int hit,
      required int index,
      required int rowId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_i64(hit);
    var arg1 = _platform.api2wire_i64(index);
    var arg2 = _platform.api2wire_i64(rowId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_update_practice(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdatePracticeConstMeta,
      argValues: [hit, index, rowId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdatePracticeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_practice",
        argNames: ["hit", "index", "rowId"],
      );

  Future<PracticeStatus?> getLastPractice({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_last_practice(port_),
      parseSuccessData: _wire2api_opt_box_autoadd_practice_status,
      constMeta: kGetLastPracticeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetLastPracticeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_last_practice",
        argNames: [],
      );

  Future<void> delete3DaysAgoHistory({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_delete_3_days_ago_history(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kDelete3DaysAgoHistoryConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDelete3DaysAgoHistoryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_3_days_ago_history",
        argNames: [],
      );

  Future<void> newBrowserHistory({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_browser_history(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kNewBrowserHistoryConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewBrowserHistoryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_browser_history",
        argNames: ["s"],
      );

  Future<List<BrowserHistory>> fetchHistory({required int page, dynamic hint}) {
    var arg0 = _platform.api2wire_i64(page);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_fetch_history(port_, arg0),
      parseSuccessData: _wire2api_list_browser_history,
      constMeta: kFetchHistoryConstMeta,
      argValues: [page],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFetchHistoryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "fetch_history",
        argNames: ["page"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Idiom _wire2api_box_autoadd_idiom(dynamic raw) {
    return _wire2api_idiom(raw);
  }

  PracticeStatus _wire2api_box_autoadd_practice_status(dynamic raw) {
    return _wire2api_practice_status(raw);
  }

  VirtualFile _wire2api_box_autoadd_virtual_file(dynamic raw) {
    return _wire2api_virtual_file(raw);
  }

  VirtualFolder _wire2api_box_autoadd_virtual_folder(dynamic raw) {
    return _wire2api_virtual_folder(raw);
  }

  BrowserHistory _wire2api_browser_history(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BrowserHistory(
      visitId: _wire2api_i64(arr[0]),
      url: _wire2api_String(arr[1]),
      createAt: _wire2api_i64(arr[2]),
      isDeleted: _wire2api_i64(arr[3]),
    );
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  FileOrFolder _wire2api_file_or_folder(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return FileOrFolder_File(
          _wire2api_box_autoadd_virtual_file(raw[1]),
        );
      case 1:
        return FileOrFolder_Folder(
          _wire2api_box_autoadd_virtual_folder(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  Idiom _wire2api_idiom(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Idiom(
      idiom: _wire2api_String(arr[0]),
      pinyin: _wire2api_String(arr[1]),
      pinyinTone: _wire2api_String(arr[2]),
      meaning: _wire2api_String(arr[3]),
    );
  }

  List<BrowserHistory> _wire2api_list_browser_history(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_browser_history).toList();
  }

  List<FileOrFolder> _wire2api_list_file_or_folder(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_file_or_folder).toList();
  }

  List<Idiom> _wire2api_list_idiom(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_idiom).toList();
  }

  NativeSysInfo _wire2api_native_sys_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return NativeSysInfo(
      cpu: _wire2api_f32(arr[0]),
      memory: _wire2api_u64(arr[1]),
      t: _wire2api_u64(arr[2]),
    );
  }

  Idiom? _wire2api_opt_box_autoadd_idiom(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_idiom(raw);
  }

  PracticeStatus? _wire2api_opt_box_autoadd_practice_status(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_practice_status(raw);
  }

  PracticeStatus _wire2api_practice_status(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return PracticeStatus(
      hit: _wire2api_i64(arr[0]),
      current: _wire2api_i64(arr[1]),
      practiceId: _wire2api_i64(arr[2]),
      createAt: _wire2api_i64(arr[3]),
    );
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  VirtualFile _wire2api_virtual_file(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return VirtualFile(
      fileId: _wire2api_i64(arr[0]),
      virtualPath: _wire2api_String(arr[1]),
      realPath: _wire2api_String(arr[2]),
      fileType: _wire2api_String(arr[3]),
      icon: _wire2api_String(arr[4]),
      openWith: _wire2api_String(arr[5]),
      createAt: _wire2api_i64(arr[6]),
    );
  }

  VirtualFolder _wire2api_virtual_folder(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return VirtualFolder(
      folderId: _wire2api_i64(arr[0]),
      createAt: _wire2api_i64(arr[1]),
      isDeleted: _wire2api_i64(arr[2]),
      folderName: _wire2api_String(arr[3]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64_0(api2wire_i64(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_box_autoadd_u64(int raw) {
    return inner.new_box_autoadd_u64_0(api2wire_u64(raw));
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_autoadd_i64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i64(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_opt_box_autoadd_u64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u64(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(uintptr_t)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_rust_bridge_say_hello(
    int port_,
  ) {
    return _wire_rust_bridge_say_hello(
      port_,
    );
  }

  late final _wire_rust_bridge_say_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_rust_bridge_say_hello');
  late final _wire_rust_bridge_say_hello =
      _wire_rust_bridge_say_helloPtr.asFunction<void Function(int)>();

  void wire_set_db_path(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_set_db_path(
      port_,
      s,
    );
  }

  late final _wire_set_db_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_set_db_path');
  late final _wire_set_db_path = _wire_set_db_pathPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_init_db(
    int port_,
  ) {
    return _wire_init_db(
      port_,
    );
  }

  late final _wire_init_dbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_init_db');
  late final _wire_init_db = _wire_init_dbPtr.asFunction<void Function(int)>();

  void wire_new_log(
    int port_,
    ffi.Pointer<wire_uint_8_list> content,
    ffi.Pointer<wire_uint_8_list> result,
  ) {
    return _wire_new_log(
      port_,
      content,
      result,
    );
  }

  late final _wire_new_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_log');
  late final _wire_new_log = _wire_new_logPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> virtual_path,
    ffi.Pointer<wire_uint_8_list> real_path,
  ) {
    return _wire_new_file(
      port_,
      virtual_path,
      real_path,
    );
  }

  late final _wire_new_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_file');
  late final _wire_new_file = _wire_new_filePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_sys_info_stream(
    int port_,
  ) {
    return _wire_sys_info_stream(
      port_,
    );
  }

  late final _wire_sys_info_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_sys_info_stream');
  late final _wire_sys_info_stream =
      _wire_sys_info_streamPtr.asFunction<void Function(int)>();

  void wire_listen_sysinfo(
    int port_,
    ffi.Pointer<wire_uint_8_list> name,
  ) {
    return _wire_listen_sysinfo(
      port_,
      name,
    );
  }

  late final _wire_listen_sysinfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_listen_sysinfo');
  late final _wire_listen_sysinfo = _wire_listen_sysinfoPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_json_path(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_set_json_path(
      port_,
      s,
    );
  }

  late final _wire_set_json_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_set_json_path');
  late final _wire_set_json_path = _wire_set_json_pathPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_cache_path(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_set_cache_path(
      port_,
      s,
    );
  }

  late final _wire_set_cache_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_set_cache_path');
  late final _wire_set_cache_path = _wire_set_cache_pathPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_idiom_path(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_set_idiom_path(
      port_,
      s,
    );
  }

  late final _wire_set_idiom_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_set_idiom_path');
  late final _wire_set_idiom_path = _wire_set_idiom_pathPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_idioms(
    int port_,
    ffi.Pointer<ffi.Uint64> count,
  ) {
    return _wire_get_idioms(
      port_,
      count,
    );
  }

  late final _wire_get_idiomsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<ffi.Uint64>)>>('wire_get_idioms');
  late final _wire_get_idioms = _wire_get_idiomsPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Uint64>)>();

  void wire_get_one_idiom(
    int port_,
    int index,
  ) {
    return _wire_get_one_idiom(
      port_,
      index,
    );
  }

  late final _wire_get_one_idiomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, uintptr_t)>>(
          'wire_get_one_idiom');
  late final _wire_get_one_idiom =
      _wire_get_one_idiomPtr.asFunction<void Function(int, int)>();

  void wire_init_folder(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_init_folder(
      port_,
      s,
    );
  }

  late final _wire_init_folderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_init_folder');
  late final _wire_init_folder = _wire_init_folderPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_new_txt(
    int port_,
    ffi.Pointer<wire_uint_8_list> filename,
    ffi.Pointer<wire_uint_8_list> open_with,
    ffi.Pointer<ffi.Int64> folder_id,
  ) {
    return _wire_create_new_txt(
      port_,
      filename,
      open_with,
      folder_id,
    );
  }

  late final _wire_create_new_txtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Int64>)>>('wire_create_new_txt');
  late final _wire_create_new_txt = _wire_create_new_txtPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.Int64>)>();

  void wire_get_children_by_id(
    int port_,
    ffi.Pointer<ffi.Int64> i,
  ) {
    return _wire_get_children_by_id(
      port_,
      i,
    );
  }

  late final _wire_get_children_by_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<ffi.Int64>)>>('wire_get_children_by_id');
  late final _wire_get_children_by_id = _wire_get_children_by_idPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Int64>)>();

  void wire_new_practice(
    int port_,
  ) {
    return _wire_new_practice(
      port_,
    );
  }

  late final _wire_new_practicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_new_practice');
  late final _wire_new_practice =
      _wire_new_practicePtr.asFunction<void Function(int)>();

  void wire_update_practice(
    int port_,
    int hit,
    int index,
    int row_id,
  ) {
    return _wire_update_practice(
      port_,
      hit,
      index,
      row_id,
    );
  }

  late final _wire_update_practicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int64, ffi.Int64,
              ffi.Int64)>>('wire_update_practice');
  late final _wire_update_practice =
      _wire_update_practicePtr.asFunction<void Function(int, int, int, int)>();

  void wire_get_last_practice(
    int port_,
  ) {
    return _wire_get_last_practice(
      port_,
    );
  }

  late final _wire_get_last_practicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_last_practice');
  late final _wire_get_last_practice =
      _wire_get_last_practicePtr.asFunction<void Function(int)>();

  void wire_delete_3_days_ago_history(
    int port_,
  ) {
    return _wire_delete_3_days_ago_history(
      port_,
    );
  }

  late final _wire_delete_3_days_ago_historyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_delete_3_days_ago_history');
  late final _wire_delete_3_days_ago_history =
      _wire_delete_3_days_ago_historyPtr.asFunction<void Function(int)>();

  void wire_new_browser_history(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_new_browser_history(
      port_,
      s,
    );
  }

  late final _wire_new_browser_historyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_browser_history');
  late final _wire_new_browser_history = _wire_new_browser_historyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_fetch_history(
    int port_,
    int page,
  ) {
    return _wire_fetch_history(
      port_,
      page,
    );
  }

  late final _wire_fetch_historyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'wire_fetch_history');
  late final _wire_fetch_history =
      _wire_fetch_historyPtr.asFunction<void Function(int, int)>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_i64_0(
    int value,
  ) {
    return _new_box_autoadd_i64_0(
      value,
    );
  }

  late final _new_box_autoadd_i64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'new_box_autoadd_i64_0');
  late final _new_box_autoadd_i64_0 = _new_box_autoadd_i64_0Ptr
      .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<ffi.Uint64> new_box_autoadd_u64_0(
    int value,
  ) {
    return _new_box_autoadd_u64_0(
      value,
    );
  }

  late final _new_box_autoadd_u64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
          'new_box_autoadd_u64_0');
  late final _new_box_autoadd_u64_0 = _new_box_autoadd_u64_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
typedef uintptr_t = ffi.UnsignedLongLong;
